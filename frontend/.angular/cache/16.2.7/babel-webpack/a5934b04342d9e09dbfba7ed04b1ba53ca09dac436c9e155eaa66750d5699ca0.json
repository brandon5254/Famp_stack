{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  }),\n  body: {}\n};\nconst address = 'http://localhost:5000/';\nexport class RestService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  PostRequest(serverAddress, info) {\n    console.log(serverAddress);\n    return this.httpClient.post(address + serverAddress, info, httpOptions);\n  }\n  GetRequest(serverAddress) {\n    console.log(serverAddress);\n    return this.httpClient.get(address + serverAddress, httpOptions);\n  }\n  PutRequest(serverAddress, info) {\n    console.log(serverAddress);\n    return this.httpClient.put(address + serverAddress, info, httpOptions);\n  }\n  DeleteRequest(serverAddress) {\n    console.log(serverAddress);\n    return this.httpClient.delete(address + serverAddress, httpOptions);\n  }\n  static #_ = this.ɵfac = function RestService_Factory(t) {\n    return new (t || RestService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestService,\n    factory: RestService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","body","address","RestService","constructor","httpClient","PostRequest","serverAddress","info","console","log","post","GetRequest","get","PutRequest","put","DeleteRequest","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\brand\\OneDrive\\Documentos\\GitHub\\Famp_stack\\frontend\\src\\app\\service\\rest.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  }),\r\n  body: {}\r\n};\r\n\r\nconst address = 'http://localhost:5000/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  PostRequest(serverAddress: string, info: object): Observable<any> {\r\n    console.log(serverAddress);\r\n    return this.httpClient.post<any>(address + serverAddress, info, httpOptions);\r\n  }\r\n\r\n  GetRequest(serverAddress: string): Observable<any> {\r\n    console.log(serverAddress);\r\n    return this.httpClient.get<any>(address + serverAddress, httpOptions);\r\n  }\r\n\r\n  PutRequest(serverAddress: string, info: object): Observable<any> {\r\n    console.log(serverAddress);\r\n    return this.httpClient.put<any>(address + serverAddress, info, httpOptions);\r\n  }\r\n\r\n  DeleteRequest(serverAddress: string): Observable<any> {\r\n    console.log(serverAddress);\r\n    return this.httpClient.delete<any>(address + serverAddress, httpOptions);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB,CAAC;EACFG,IAAI,EAAE;CACP;AAED,MAAMC,OAAO,GAAG,wBAAwB;AAKxC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAgB;EAE9CC,WAAWA,CAACC,aAAqB,EAAEC,IAAY;IAC7CC,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAC1B,OAAO,IAAI,CAACF,UAAU,CAACM,IAAI,CAAMT,OAAO,GAAGK,aAAa,EAAEC,IAAI,EAAET,WAAW,CAAC;EAC9E;EAEAa,UAAUA,CAACL,aAAqB;IAC9BE,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAC1B,OAAO,IAAI,CAACF,UAAU,CAACQ,GAAG,CAAMX,OAAO,GAAGK,aAAa,EAAER,WAAW,CAAC;EACvE;EAEAe,UAAUA,CAACP,aAAqB,EAAEC,IAAY;IAC5CC,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAC1B,OAAO,IAAI,CAACF,UAAU,CAACU,GAAG,CAAMb,OAAO,GAAGK,aAAa,EAAEC,IAAI,EAAET,WAAW,CAAC;EAC7E;EAEAiB,aAAaA,CAACT,aAAqB;IACjCE,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAC1B,OAAO,IAAI,CAACF,UAAU,CAACY,MAAM,CAAMf,OAAO,GAAGK,aAAa,EAAER,WAAW,CAAC;EAC1E;EAAC,QAAAmB,CAAA,G;qBAtBUf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}